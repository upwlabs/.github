name: Android Build Manual
on:
  workflow_dispatch:
    inputs:
      command:
        description: '[module]:[task]'
        required: true
        default: 'app:assembleRnBeta'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NDK: 21.0.6113669
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # cache saves around 15s :(
      - name: Cache NDK
        uses: actions/cache@v2
        id: cache-ndk
        with:
          path: /usr/local/lib/android/sdk/ndk/21.0.6113669
          key: ${{ runner.os }}-android-ndk-${{ env.NDK }}-only
      - name: Install NDK
        run: |
          echo 'cache-hit: ${{ steps.cache-ndk.outputs.cache-hit }}'
          if [ -d $ANDROID_HOME/ndk/${{ env.NDK }} ]; then echo "ndk ${{env.NDK}} found"; else sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;${{ env.NDK }}" > log.txt; fi
          ls ${ANDROID_HOME}/ndk

      - name: Prepare keystore
        if: contains(github.event.inputs.command, 'Release')
        run: |
          echo "Prepare keystore for command ${{ github.event.input.command }}"
          echo "${{ secrets.ANDROID_UPLDKEY_ASC }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.ANDROID_UPLDKEY_ASC_DECRYPT }}" --batch release.keystore.asc > release.keystore
          ls -al

      - name: Gradle build
        id: gradle-build
        run: |
          command=${{ github.event.inputs.command }}
          tag_name=`echo $command | awk '{split($0,a,":"); print a[2]}'`
          tag_name="$tag_name-`date -u +%Y%m%d%H%M%S`"

          ./gradlew ${command} -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"

          files=`find */build/outputs \( -name "*.apk" -o -name "*.aab" \) | sed "s/\.\///"`
          download_urls=`echo $files | sed "s#.*/#https://github.com/$GITHUB_REPOSITORY/releases/download/$tag_name/#"`

          file_path=`echo $files | paste -s -d ',' - | awk -F ',' '{print $1}'`
          file_name=`echo $file_path | awk -F '/' '{print $NF}'`

          s3_url=`echo $file_path | sed "s#.*/#https://s3.amazonaws.com/glow-sandbox/releases/$tag_name/#"`

          echo $files
          echo $file_path
          echo $download_urls
          echo $s3_url

          echo "::set-output name=FILE_PATH::$file_path"
          echo "::set-output name=DOWNLOAD_URLS::$download_urls"
          echo "::set-output name=S3_URL::$s3_url"
          echo "::set-output name=TAG_NAME::$tag_name"
        env:
          KSTOREPWD: ${{ secrets.ANDROID_UPLDKSPWD}}
          KALIAS: ${{ secrets.ANDROID_UPLDKALIAS}}
          KEYPWD: ${{ secrets.ANDROID_UPLDKEYPWD}}
          KSTORE: '../release.keystore'

      - name: Release
        id: release
        uses: ncipollo/release-action@v1.8.6
        with:
          tag: ${{ steps.gradle-build.outputs.TAG_NAME }}
          artifacts: ${{ steps.gradle-build.outputs.FILE_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: $GITHUB_SHA

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY}}
          aws-region: us-east-1

      - name: Upload
        run: |
          aws s3 cp ${{ steps.gradle-build.outputs.FILE_PATH }} s3://glow-sandbox/releases/${{ steps.gradle-build.outputs.TAG_NAME }}/  --acl  public-read --region us-east-1 --sse

      - name: Slack
        env:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          TEXT="
          \n${{ steps.gradle-build.outputs.DOWNLOAD_URLS }}
          \n<@vicky> <@xinrui> <@jessie.liu>
          \nCreator: $GITHUB_ACTOR
          \n<@alia> <@winter> <@mandy> <@tao>
          \nAction page: https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA/checks
          \n
          \nS3: ${{ steps.gradle-build.outputs.S3_URL }}
          "
          curl -X POST -H 'Content-type: application/json' --data '{"text":"'"$TEXT"'"}' $slack_webhook
        shell: bash
